<?php

/*
	implementation of hook_nodeapi
*/
function menutrialsnoderef_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  if ($op == 'view' && $page == TRUE) {
    $breadcrumb = drupal_get_breadcrumb();
    $c = count($breadcrumb);
    if ($c < 2 || ($c == 2 && $breadcrumb[1]==drupal_get_title())) {
      $fields = content_types($node->type);
      $fields = $fields['fields'];
      foreach($fields as $k => $field) {
        if ($field['type']=='nodereference' && ($nid = $node->{$k}[0]['nid'])) {
          $active_trail = menutrialsnoderef_menu_set_active_trail($nid);
          $item = menu_get_item('node/'.$nid);
          $breadcrumb = array();
          foreach ($active_trail as $parent) {
            
            $breadcrumb[] = l($parent['title'], $parent['href'], $parent['localized_options']);
          }
          $breadcrumb[] = l($item['title'],$item['href'],$item['localized_options']);
           if (variable_get('menu_breadcrumb_append_node_title', 0) == 1) {
            if (variable_get('menu_breadcrumb_append_node_url', 0) == 1) {
              $breadcrumb[] = l(drupal_get_title(), 'node/'.$node->nid, array('html' => TRUE));
            }
            else {
              $breadcrumb[] = drupal_get_title();
            }
          }
          drupal_set_breadcrumb($breadcrumb);
          break;
        }
      }
    }
  }
}
 	
function menutrialsnoderef_field_settings_alter(&$v, $op, $field) { 
 	 if ($field['type']== 'nodereference') {
   	 switch ($op) {
     	case 'form': 
        $v['menutrialsnoderef'] = array(
          '#type' => 'checkbox',
          '#title' => t('Use breadcrumb of first referenced node'),
          '#default_value' => isset($widget['menutrialsnoderef']) ? $widget['menutrialsnoderef'] : 1,
          '#description' => t('Select this try to use the first referenced node in this field as breadcrumb.'),
        );
        
     	break;
    }
  }
}

function menutrialsnoderef_menu_set_active_trail($nid) {
  $trail = array();
  $trail[] = array('title' => t('Home'), 'href' => '<front>', 'localized_options' => array(), 'type' => 0);
  $item = menu_get_item('node/'.$nid);

  // Check whether the current item is a local task (displayed as a tab).
  if ($item['tab_parent']) {
    // The title of a local task is used for the tab, never the page title.
    // Thus, replace it with the item corresponding to the root path to get
    // the relevant href and title.  For example, the menu item corresponding
    // to 'admin' is used when on the 'By module' tab at 'admin/by-module'.
    $parts = explode('/', $item['tab_root']);
    $args = arg();
    // Replace wildcards in the root path using the current path.
    foreach ($parts as $index => $part) {
      if ($part == '%') {
        $parts[$index] = $args[$index];
      }
    }
    // Retrieve the menu item using the root path after wildcard replacement.
    $root_item = menu_get_item(implode('/', $parts));
    if ($root_item && $root_item['access']) {
      $item = $root_item;
    }
  }
  menutrialsnoderef_menu_breadcrumb($nid);
  $tree = menutrialsnoderef_menu_tree_page_data(menu_get_active_menu_name(),$nid);
  list($key, $curr) = each($tree);

  while ($curr) {
    // Terminate the loop when we find the current path in the active trail.
    if ($curr['link']['href'] == $item['href']) {
      $curr = FALSE;
    }
    else {
      // Add the link if it's in the active trail, then move to the link below.
      if ($curr['link']['in_active_trail']) {
        $trail[] = $curr['link'];
        $tree = $curr['below'] ? $curr['below'] : array();
      }
      list($key, $curr) = each($tree);
    }
  }
  return $trail;
}
function menutrialsnoderef_menu_tree_page_data($menu_name = 'navigation',$nid) {
  static $tree = array();

  // Load the menu item corresponding to the current page.
  if ($item = menu_get_item('node/'.$nid)) {
    // Generate a cache ID (cid) specific for this page.
    $cid = 'links:'. $menu_name .':page-cid:'. $item['href'] .':'. (int)$item['access'];

    if (!isset($tree[$cid])) {
      // If the static variable doesn't have the data, check {cache_menu}.
      $cache = cache_get($cid, 'cache_menu');
      if ($cache && isset($cache->data)) {
        // If the cache entry exists, it will just be the cid for the actual data.
        // This avoids duplication of large amounts of data.
        $cache = cache_get($cache->data, 'cache_menu');
        if ($cache && isset($cache->data)) {
          $data = $cache->data;
        }
      }
      // If the tree data was not in the cache, $data will be NULL.
      if (!isset($data)) {
        // Build and run the query, and build the tree.
        if ($item['access']) {
          // Check whether a menu link exists that corresponds to the current path.
          $args = array($menu_name, $item['href']);
          $placeholders = "'%s'";
          if (drupal_is_front_page()) {
            $args[] = '<front>';
            $placeholders .= ", '%s'";
          }
          $parents = db_fetch_array(db_query("SELECT p1, p2, p3, p4, p5, p6, p7, p8 FROM {menu_links} WHERE menu_name = '%s' AND link_path IN (". $placeholders .")", $args));

          if (empty($parents)) {
            // If no link exists, we may be on a local task that's not in the links.
            // TODO: Handle the case like a local task on a specific node in the menu.
            $parents = db_fetch_array(db_query("SELECT p1, p2, p3, p4, p5, p6, p7, p8 FROM {menu_links} WHERE menu_name = '%s' AND link_path = '%s'", $menu_name, $item['tab_root']));
          }
          // We always want all the top-level links with plid == 0.
          $parents[] = '0';

          // Use array_values() so that the indices are numeric for array_merge().
          $args = $parents = array_unique(array_values($parents));
          $placeholders = implode(', ', array_fill(0, count($args), '%d'));
          $expanded = variable_get('menu_expanded', array());
          // Check whether the current menu has any links set to be expanded.
          if (in_array($menu_name, $expanded)) {
            // Collect all the links set to be expanded, and then add all of
            // their children to the list as well.
            do {
              $result = db_query("SELECT mlid FROM {menu_links} WHERE menu_name = '%s' AND expanded = 1 AND has_children = 1 AND plid IN (". $placeholders .') AND mlid NOT IN ('. $placeholders .')', array_merge(array($menu_name), $args, $args));
              $num_rows = FALSE;
              while ($item = db_fetch_array($result)) {
                $args[] = $item['mlid'];
                $num_rows = TRUE;
              }
              $placeholders = implode(', ', array_fill(0, count($args), '%d'));
            } while ($num_rows);
          }
          array_unshift($args, $menu_name);
        }
        else {
          // Show only the top-level menu items when access is denied.
          $args = array($menu_name, '0');
          $placeholders = '%d';
          $parents = array();
        }
        // Select the links from the table, and recursively build the tree. We
        // LEFT JOIN since there is no match in {menu_router} for an external
        // link.
        $data['tree'] = menu_tree_data(db_query("
          SELECT m.load_functions, m.to_arg_functions, m.access_callback, m.access_arguments, m.page_callback, m.page_arguments, m.title, m.title_callback, m.title_arguments, m.type, m.description, ml.*
          FROM {menu_links} ml LEFT JOIN {menu_router} m ON m.path = ml.router_path
          WHERE ml.menu_name = '%s' AND ml.plid IN (". $placeholders .")
          ORDER BY p1 ASC, p2 ASC, p3 ASC, p4 ASC, p5 ASC, p6 ASC, p7 ASC, p8 ASC, p9 ASC", $args), $parents);
        $data['node_links'] = array();
        menu_tree_collect_node_links($data['tree'], $data['node_links']);
        // Cache the data, if it is not already in the cache.
        $tree_cid = _menu_tree_cid($menu_name, $data);
        if (!cache_get($tree_cid, 'cache_menu')) {
          cache_set($tree_cid, $data, 'cache_menu');
        }
        // Cache the cid of the (shared) data using the page-specific cid.
        cache_set($cid, $tree_cid, 'cache_menu');
      }
      // Check access for the current user to each item in the tree.
      menu_tree_check_access($data['tree'], $data['node_links']);
      $tree[$cid] = $data['tree'];
    }
    return $tree[$cid];
  }

  return array();
}



function menutrialsnoderef_menu_breadcrumb($nid){
  if (module_exists('menu_breadcrumb') && variable_get('menu_breadcrumb_determine_menu', 1)) {
    $menu_item = menu_get_item('node/'.$nid);
    $result = db_query("SELECT mlid, menu_name FROM {menu_links} WHERE link_path = '%s'", $menu_item['href']);
    $menu_link_menus = array();
    while ($menu_link = db_fetch_array($result)) {
      $menu_link_menus[$menu_link['menu_name']] = TRUE;
    }

    // Choose the highest-priority 'Enabled' menu.
    $match_cache = variable_get('menu_breadcrumb_pattern_matches', array());
    $menu_list = array_filter(menu_breadcrumb_menu_list()); // enabled menus.

    foreach (array_keys($menu_list) as $menu_name) {
      $is_pattern = (substr($menu_name, 0, 1) == '/' && substr($menu_name, -1, 1) == '/');
      if ($is_pattern) {
        // Look for each of the $menu_link_menus in the pattern match cache.
        foreach (array_keys($menu_link_menus) as $menu_link_menu_name) {
          if (array_key_exists($menu_link_menu_name, $match_cache)
              && $match_cache[$menu_link_menu_name] == $menu_name) {
            menu_set_active_menu_name($menu_link_menu_name);
            break 2;
          }
        }
      }
      else {
        if (array_key_exists($menu_name, $menu_link_menus)) {
          menu_set_active_menu_name($menu_name);
          break;
        }
      }
    }
  }
}